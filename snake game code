//start of bitmoji section
var glasses = function(x, y, h){
    strokeWeight(3); //glasses
    line(x + 72, y + 30 - h/100, x + 45 - h/150, y + 30 - h/100);
    line(x + 85, y + 30 - h/100, x + 115 + h/150, y + 30 - h/100);
    line(x + 75, y + 30 - h/100, x + 75, y + 50);
    line(x + 45 - h/100, y + 30 - h/100, x + 45 - h/100, y + 50);
    line(x + 85, y + 30 - h/100, x + 85, y + 50);
    line(x + 115 + h/100, y + 30 - h/100, x + 115 + h/100, y + 50);
    line(x + 75, y + 40, x + 85, y + 40);
};
var hat = function(x, y, h){
    y += -h/20;
    fill(3, 23, 242);
    rect(x + 66, y +- 30, 30, 40); //the blue box
    fill(255, 199, 199);
    rect(x + 89, y +- 24, 3, 6);//windows
    rect(x + 89, y +- 24, 3, 6);
    rect(x + 86, y +- 16, 3, 6);
    rect(x + 86, y +- 16, 3, 6);
    rect(x + 83, y +- 16, 3, 6);
    rect(x + 83, y +- 24, 3, 6);
    rect(x + 70, y +- 24, 3, 6);
    rect(x + 70, y +- 16, 3, 6);
    rect(x + 73, y +- 24, 3, 6);
    rect(x + 73, y +- 16, 3, 6);
    rect(x + 76, y +- 16, 3, 6);
    rect(x + 76, y +- 24, 3, 6);
    rect(x + 89, y +- 16, 3, 6);
    rect(x + 86, y +- 24, 3, 6);

};
var drawHead = function(x, y, h){
    strokeWeight(0.1);
    fill(250, 255, 212); //neck
    rect(x + 65 - h/40, y + 90 - h/40, 30 + h/40, 20 + h/40);

    fill(251, 255, 222);
    ellipse(x + 80, y + 50 - h/20, 80 + h/10, 100 + h/10); //face

    fill(255, 255, 255);
    ellipse(x + 60 - h/100, y + 40 - h/100, 25 + h/50, 15 + h/50); //eyes
    ellipse(x + 100 + h/100, y + 40 - h/100, 25 + h/50, 15 + h/50);
    fill(53, 92, 38);
    ellipse(x + 60 - h/160, y + 40 - h/160, 10 + h/80, 10 + h/80); //pupils
    ellipse(x + 100 + h/160, y + 40 - h/160, 10 + h/80, 10 + h/80);
    stroke(20, 20, 17);

    strokeWeight(1);
    fill(255, 255, 255);
    arc(x + 80 - h/300, y + 78 - h/150, 50 + h/50, 20 + h/50, 0, 180); //mouth
    fill(0, 0, 0);
    line(x + 55 - h/300, y + 78 - h/150, x + 105 + h/300, y + 78 - h/150);
    line(x + 58 - h/300, y + 83 - h/150, x + 101 + h/300, y + 83 - h/150);

    fill(82, 9, 9);
    rect(x + 45 - h/20, y + 5 - h/10, 70 + h/10, 20 + h/10); //hair
    arc(x + 47 - h/20, y + 30 - h/20, 30 + h/30, 45 + h/30, 120, 290);
    arc(x + 116 + h/20, y + 30 - h/20, 30 + h/30, 45 + h/30, -135, 91);

    fill(255, 240, 240);
    triangle(x + 70 - h/150, y + 70 + h/150, x + 80, y + 50 - h/150, x + 90 + h/150, y + 70 + h/150); //nose
    fill(240, 255, 186);
    hat(x, y, h);
    glasses(x, y, h);
};
var drawBody = function(x, y, h){
    strokeWeight(1);
    fill(25, 230, 80);
    rect(x + 40 - h/80, y + 105 + h/80, 80 + h/30, 100 + h/200); //torso
    
    ellipse(x + 40 - h/40, y + 105, 30, 20); //arms
    ellipse(x + 120 + h/40, y + 105, 30, 20);
    rect(x + 119 + h/40, y + 95, 15, 50 + h/20);
    rect(x + 26 - h/40, y + 95, 15, 50 + h/20);
    rect(x + 26 - h/40, y + 137, 15, 50 + h/20);
    rect(x + 119 + h/40, y + 137, 15, 50 + h/20);
    
    fill(19, 66, 22); //shirt design
    rect(x + 49 - h/40, y + 120 + h/40, 20 + h/40, 20 + h/40);
    rect(x + 90 + h/40, y + 120 + h/40, 20 + h/40, 20 + h/40);
    rect(x + 70 - h/80, y + 140 + h/40, 20 + h/20, 30 + h/40);
    rect(x + 60 - h/40, y + 150 + h/40, 10 + h/40, 30 + h/40);
    rect(x + 90 + h/40, y + 150 + h/40, 10 + h/40, 30 + h/40);

    fill(248, 255, 207); //hands
    ellipse(x + 128 + h/40, y + 183 + h/40, 20 + h/40, 20 + h/40);
    ellipse(x + 32 - h/40, y + 188 + h/40, 20 + h/40, 20 + h/40);
    strokeWeight(1);
    fill(157, 112, 224);
    textSize(15 + h/40);
    text("MT", x + 69 - h/80, y + 134 - h/80); //initials
};
var drawMe=function(x, y, h){
    scale(0.5);
    drawHead(x, y, h);
    drawBody(x, y, h); // end of bitmoji function
};
var bitmojiHeadAndNeck = function (xPos,yPos,bitHeight)
{
    noStroke();
    fill(241,194,125);//skin tone
    ellipse (xPos+(bitHeight/300*15),yPos-(bitHeight/300*40),bitHeight/300*136,           bitHeight/300*179); //head
    rect (xPos+(bitHeight/300*2),yPos+(bitHeight/300*19),bitHeight/300*24,bitHeight       /300*62);//neck
};

//This function draws the hair of the bitmoji
var bitmojiHair = function (xPos,yPos,bitHeight)
{
    fill(0, 0, 0);//hair color
    quad(xPos+(bitHeight/300*69),yPos-(bitHeight/300*43),xPos+(bitHeight/300*85),yPos     -(bitHeight/300*43),xPos+(bitHeight/300*68),yPos-(bitHeight/300*124),xPos+(bitHeight/300*40),yPos-(bitHeight/300*125)); //left hair
    quad(xPos-(bitHeight/300*33),yPos-(bitHeight/300*43),xPos-(bitHeight/300*54),yPos-(bitHeight/300*43),xPos-(bitHeight/300*36),yPos-(bitHeight/300*123),xPos-(bitHeight/300*5),yPos-(bitHeight/300*128)); //right hair
    ellipse(xPos+(bitHeight/300*16),yPos-(bitHeight/300*122),bitHeight/300*103,bitHeight/300*25);//top hair
};

//This function draws the eyes and eyebrows of the bitmoji
var bitmojiEyesAndEyebrows = function (xPos,yPos,bitHeight)
{
    stroke(0, 0, 0);//eye outline
    fill(255, 255, 255);//eye background color
    ellipse(xPos-(bitHeight/300*3),yPos-(bitHeight/300*58),bitHeight/300*29,bitHeight/300*16);//right eye
    ellipse(xPos+(bitHeight/300*36),yPos-(bitHeight/300*58),bitHeight/300*29,bitHeight/300*16);//left eye
    fill(141,85,36);//iris color
    ellipse(xPos-(bitHeight/300*3),yPos-(bitHeight/300*58),bitHeight/300*8,bitHeight/300*9);//right iris
    ellipse(xPos+(bitHeight/300*36),yPos-bitHeight/300*58,bitHeight/300*8,bitHeight/300*9);//left iris 
    fill(0, 0, 0);
    rect(xPos+(bitHeight/300*22),yPos-(bitHeight/300*80),bitHeight/300*25,bitHeight/300*5);//left eyebrow
    rect(xPos-(bitHeight/300*15),yPos-(bitHeight/300*80),bitHeight/300*25,bitHeight/300*5);//right eyebrow
};

//This function draws the nose and mouth of the bitmoji
var bitmojiNoseAndMouth = function (xPos,yPos,bitHeight)
{
    fill(241,194,125);//skin tone
    bezier(xPos+(bitHeight/300*18),yPos-(bitHeight/300*15),xPos-(bitHeight/300*8),yPos-(bitHeight/300*10),xPos+(bitHeight/300*2),yPos-(bitHeight/300*41),xPos+(bitHeight/300*21),yPos-bitHeight/300*33); //nose
    fill(255, 255, 255);//teeth color
    arc(xPos+(bitHeight/300*16),yPos+(bitHeight/300*7),bitHeight/300*48,bitHeight/300*30,bitHeight/300*0,180);//mouth
    line(xPos+(bitHeight/300*41),yPos+(bitHeight/300*8),xPos-(bitHeight/300*9),yPos+bitHeight/300*7);//top of mouth
};

//This function draws the shirt of the bitmoji
var bitmojiShirt = function (xPos,yPos,bitHeight)
{
    fill(135,206,250);//shirt color
    quad(xPos-(bitHeight/300*71),yPos+(bitHeight/300*90),xPos+(bitHeight/300*108),yPos+(bitHeight/300*90),xPos+(bitHeight/300*67),yPos+(bitHeight/300*56),xPos-(bitHeight/300*31),yPos+(bitHeight/300*56)); //shirt
    fill(3, 3, 3);//text color
    textSize(bitHeight/296*33);//text size
    text("JL", xPos+(bitHeight/300*11), yPos+(bitHeight/300*85));//text on shirt
};

//This function draws the hat of the bitmoji
var bitmojiHat = function (xPos,yPos,bitHeight)
{
    noStroke();
    fill(104, 116, 122);//hat color
    rect(xPos-(bitHeight/300*62),yPos-(bitHeight/300*124),bitHeight/300*159,bitHeight/300*24);//bottom part of hat
    rect(xPos-(bitHeight/300*35),yPos-(bitHeight/300*183),bitHeight/300*102,bitHeight/300*59);//top part of hat
};

//This function draws out head portion of the bitmoji which inludes everything on the face, the hair, and the hat
var drawBitmojiHead = function (xPos,yPos,bitHeight)
{
    bitmojiHeadAndNeck(xPos,yPos,bitHeight);
    bitmojiHair(xPos,yPos,bitHeight);
    bitmojiEyesAndEyebrows(xPos,yPos,bitHeight);
    bitmojiNoseAndMouth(xPos,yPos,bitHeight);
    bitmojiHat(xPos,yPos,bitHeight);
};

//This function draws out the body portion of the bitmoji which includes the shirt
var drawBitmojiBody = function (xPos,yPos,bitHeight)
{
    bitmojiShirt(xPos,yPos,bitHeight);
};

//This draws the bitmoji as a whole and the function combines both the head and body portion of the bitmoji
var drawBitmoji = function (xPos,yPos,bitHeight)
{
    drawBitmojiHead(xPos,yPos,bitHeight);
    drawBitmojiBody(xPos,yPos,bitHeight);
};

//end of bitmoji section









//global variables
var currScene = 1; //scene counter for each of the three scenes
var score = 8;
var highScore = 0;
var l = 0; //food counter
//Creating a "snake head" that will move around using button inputs
var direction; //direction the snake is heading; 1 = up, 2 = down, 3 = left, 4 = right
var snakeTail = []; //an empty array for the tail to be added when a score is reached
var saveX = []; //arrays to save the previous x and y positions of the snake for the body
var saveY = [];
var snakeColor = color(17, 0, 255);
var speed = 1;
var isIncremental = false;

//start of snake
var Snake = function(x, y, direction) { 
    this.x = x;
    this.y = y;
    this.direction = direction;
};
Snake.prototype.draw = function() {
     fill(snakeColor);
     strokeWeight(1);
     rect(this.x, this.y, 10, 10);
};


Snake.prototype.up = function() { //moves the snake up
     this.y -= speed;
};
Snake.prototype.down = function() {//moves the snake down
     this.y += speed;
};
Snake.prototype.right = function() {//moves the snake right
     this.x += speed;
};
Snake.prototype.left = function() {//moves the snake left
     this.x -= speed;
};

//Snake function
var snake = new Snake(200, 200, UP); //creates new snake
//end of snake

//food function
var Food = function(x, y) { 
    this.x = x;
    this.y = y;
};

Food.prototype.draw = function() {
    fill(255, 0, 0);
    strokeWeight(1);
    ellipse(this.x, this.y, 10, 10);
};

var foodArray = []; //starts the food array
foodArray.push(new Food(round(random(30, 360)), round(random(30, 360)))); //adds 1 initial food

var drawFood = function() {
    foodArray[l].draw();
};
//end of food

//start of button section
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(87, 247, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(235, 0, 59);
    textSize(18);
    textAlign(LEFT, TOP);
    text(this.label, this.x + 10, this.y+this.height / 4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};//end of button config

//buttons
var startButton = new Button({ //sends the user to the snake screen
    x: 125,
    y: 270,
    label: "Click to Start!",
    onClick: function() {
        currScene = 2;
    }
});

var colorButtonRed = new Button({ //makes the Snake red
    x: 287,
    y: 18,
    label: "Red Snake!",
    onClick: function() {
        snakeColor = color(135, 13, 13);
    }
});
var colorButtonYellow = new Button({ //makes the Snake yellow
    x: 273,
    y: 76,
    label: "Yellow Snake!",
    onClick: function() {
        snakeColor = color(180, 240, 29);
    }
});
var colorButtonBlue = new Button({ //makes the Snake blue
    x: 288,
    y: 135,
    label: "Blue Snake!",
    onClick: function() {
        snakeColor = color(36, 4, 196);
    }
});
var restartButton = new Button({ //sends the user back to the snake screen, reseting stats
    x: 125,                         //aside from highscore
    y: 270,
    label: "Click to restart!",
    onClick: function() {
        snake.x = 200;
        snake.y = 200;
        currScene = 2;
        score = 0;
        direction = 0;
        snakeTail = []; //restarts the tail array
        speed = 1;
    }
});
var incrementalSpeedButton = new Button({ //makes the Snake red
    x: 149,
    y: 340,
    width: 110,
    label: "1:1 Speed!",
    onClick: function() {
        isIncremental = true;
    }
});
var speedButtonOne = new Button({ //makes the speed normal
    x: -5,
    y: 115,
    width: 140,
    label: "Speed Normal!",
    onClick: function() {
        speed = 10;
    }
});
var speedButtonTwo = new Button({ //makes the speed fast
    x: -5,
    y: 180,
    width: 120,
    label: "Speed Fast!",
    onClick: function() {
        speed = 5;
    }
});
mouseClicked = function() {
    startButton.handleMouseClick();
    restartButton.handleMouseClick();
    colorButtonRed.handleMouseClick();
    colorButtonYellow.handleMouseClick();
    colorButtonBlue.handleMouseClick();
    incrementalSpeedButton.handleMouseClick();
    speedButtonOne.handleMouseClick();
    speedButtonTwo.handleMouseClick();
};
//end of buttons

var titleScreen = function() { //title screen
    background(88, 200, 240);
    startButton.draw();
    colorButtonRed.draw();
    colorButtonYellow.draw();
    colorButtonBlue.draw();
    incrementalSpeedButton.draw();
    speedButtonOne.draw();
    speedButtonTwo.draw();
    textSize(40);
    fill(37, 130, 33);
    text("The Snake Game", 25, 24, 301, 100);
    textSize(20);
    text("By Jason Li & Matthew Tibbitts", 60, 230, 300, 100);
    drawMe(48, 557, 0);
    drawBitmoji(636,651,219);
    scale(2);
};

var snakeScreen = function() { //snake screen
    background(64, 242, 255);
    fill(172, 217, 48);
    rect(20, 20, 360, 360);
    fill(0, 0, 0);
    text("Score: " + score + "  " + "Highscore: " + highScore, 5, 1);
};

var gameoverScreen = function () { //end screen
    background(17, 56, 69);
    restartButton.draw();
    textSize(52);
    fill(37, 130, 33);
    text("You've died!", 50, 68, 300, 109);
    textSize(20);
    text("Your Score: " + score + "  Highscore: " + highScore, 79, 148);
    textSize(20);
    text("Press the button below to start over",40,218,315,100);
};

var snakeAdd = function(){ //adds more tail for the snake the more it eats
    if (score % 1 === 0){
        snakeTail.push(new Snake(saveX[saveX.length - round((22 / speed)) * snakeTail.length], saveY[saveY.length - round((22 / speed)) * snakeTail.length], direction));
    }
    if (isIncremental === true) {
        speed++;
    }
};
var snakeTailFollow = function(){ //makes the tail follow the snake head
    for (var i = 0; i < snakeTail.length; i++) {
        snakeTail[i].draw();
        snakeTail[i].x = saveX[saveX.length - round((22 / speed)) * (i + 1)];
        snakeTail[i].y = saveY[saveY.length - round((22 / speed)) * (i + 1)];
        if (snake.x >= snakeTail[i].x && snake.y >= snakeTail[i].y && snake.x <= snakeTail[i].x + 5 && snake.y <= snakeTail[i].y + 5) {
            currScene = 3;
        }
    }
};

Snake.prototype.move = function(direction) { //moves the snake when the arrow keys are not pressed
    if (keyIsPressed === false || (keyIsPressed === true && (keyCode !== UP || keyCode !== DOWN || keyCode !== LEFT || keyCode !== RIGHT))) {
        if (direction === 1) {
            this.up();
        }
        if (direction === 2) {
            this.down();
        }
        if (direction === 3) {
            this.left();
        }
        if (direction === 4) {
            this.right();
        }
    }
};



//draw function
draw = function() {
    if (currScene === 1) 
        {titleScreen(); //title screen
        }
    if (currScene === 2) {
        textSize(15);
        snakeScreen();  //game screen
        snake.draw(); //starts the snake
        drawFood();
        snake.move(direction);
        snakeTailFollow();
        
        if (snake.x > 20 && snake.x < 370 && snake.y > 20 && snake.y < 370){
            saveX.push(snake.x);
            saveY.push(snake.y);
            if (keyIsPressed && keyCode === UP) //changing the snake direction (each key is what direction the snake goes)
            {
            direction = 1;
            }
            if (keyIsPressed && keyCode === DOWN)
            {
            direction = 2;
            }
            if (keyIsPressed && keyCode === LEFT)
            {
            direction = 3;
            }
            if (keyIsPressed && keyCode === RIGHT)
            {
            direction = 4;
            }
            saveX.push(snake.x);
            saveY.push(snake.y);
        }
        if (snake.x >= foodArray[l].x - 15 && snake.x <= foodArray[l].x + 5 && snake.y >= foodArray[l].y - 15 && snake.y <= foodArray[l].y + 5) {
            score++;
            foodArray[l].x = 450;
            foodArray.push(new Food(round(random(30, 360)), round(random(30, 360))));
            l++;
            if (score > highScore){
                highScore = score;
            }
            snakeAdd();
        }
        if (snake.x <= 20 || snake.x >= 370 || snake.y <= 20 || snake.y >= 370) {
            currScene = 3;
        }
    }
    if (currScene === 3) {
        gameoverScreen();
    }
};
